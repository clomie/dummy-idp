/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn more about Gradle by exploring our samples at https://docs.gradle.org/6.8.3/samples
 */
buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.nimbusds:nimbus-jose-jwt:9.7'
    }
}

import com.nimbusds.jose.crypto.factories.DefaultJWSSignerFactory;
import com.nimbusds.jose.jwk.gen.RSAKeyGenerator;
import com.nimbusds.jose.jwk.JWK;
import com.nimbusds.jose.jwk.JWKSet;
import com.nimbusds.jose.jwk.KeyUse;
import com.nimbusds.jose.jwk.RSAKey;
import com.nimbusds.jose.JWSAlgorithm;
import com.nimbusds.jose.JWSHeader;
import com.nimbusds.jose.JWSSigner;
import com.nimbusds.jwt.JWT;
import com.nimbusds.jwt.JWTClaimsSet;
import com.nimbusds.jwt.SignedJWT;

if (project.hasProperty("args")) {
    ext.cmdargs = project.getProperty("args")
} else { 
    ext.cmdargs = ""
}

task generateKeys {
    doLast {
        RSAKey generatedPrivateKey = 
            new RSAKeyGenerator(2048)
                .keyUse(KeyUse.SIGNATURE)
                .algorithm(JWSAlgorithm.RS256)
                .keyIDFromThumbprint(true)
                .generate();

        def pkFile = file("$projectDir/../privateKey.json")
        pkFile.setText(generatedPrivateKey.toString())
        println "Output: $pkFile"

        def pkJson = pkFile.getText()
        def privateKey = JWK.parse(pkJson)
        JWKSet jwks = new JWKSet(privateKey).toPublicJWKSet();

        def jwksFile = file("$projectDir/../dummy-idp/.well-known/jwks.json")
        jwksFile.setText(jwks.toString())
        println "Output: $jwksFile"
    }
}

task generateIdToken {
    doLast {
        def privateKey = JWK.parse(file("$projectDir/../privateKey.json").getText())

        def sub = cmdargs.split(" ")[0]
        def now = Instant.now().getEpochSecond()
        def claims = [
            "iss": "http://localhost",
            "sub": sub,
            "aud": "dummy-audience",
            "exp": Integer.MAX_VALUE,
            "iat": now,
        ]

        JWSHeader header = new JWSHeader.Builder(JWSAlgorithm.RS256).keyID(privateKey.getKeyID()).build();
        JWTClaimsSet claimsSet = JWTClaimsSet.parse(claims);
        SignedJWT jwt = new SignedJWT(header, claimsSet);

        JWSSigner signer = new DefaultJWSSignerFactory().createJWSSigner(privateKey, JWSAlgorithm.RS256);
        jwt.sign(signer);

        System.out.println(jwt.serialize());
    }
}